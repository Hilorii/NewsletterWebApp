// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewsletterWebApp.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NewsletterWebApp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250104192252_PrimaryKeyForSubscriptionsAndEmls")]
    partial class PrimaryKeyForSubscriptionsAndEmls
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("NewsletterWebApp.Data.Click", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmailLogId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmailLogId");

                    b.ToTable("Clicks");
                });

            modelBuilder.Entity("NewsletterWebApp.Data.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsNewsletter")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScheduled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalClicks")
                        .HasColumnType("integer");

                    b.Property<int>("TotalOpens")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("NewsletterWebApp.Data.EmailLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("EmailId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.ToTable("EmailLogs");
                });

            modelBuilder.Entity("NewsletterWebApp.Data.EmailLogUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("EmailLogId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmailLogId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailLogUsers");
                });

            modelBuilder.Entity("NewsletterWebApp.Data.EmailMailingList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("EmailId")
                        .HasColumnType("integer");

                    b.Property<int>("MailingListId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.HasIndex("MailingListId");

                    b.ToTable("EmailMailingLists");
                });

            modelBuilder.Entity("NewsletterWebApp.Data.EmailOpen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmailLogId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmailLogId");

                    b.ToTable("EmailOpens");
                });

            modelBuilder.Entity("NewsletterWebApp.Data.MailingList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MailingLists");
                });

            modelBuilder.Entity("NewsletterWebApp.Data.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("MailingListId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MailingListId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("NewsletterWebApp.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<bool>("Admin")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Subscribed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NewsletterWebApp.Data.Click", b =>
                {
                    b.HasOne("NewsletterWebApp.Data.EmailLog", "EmailLog")
                        .WithMany("Clicks")
                        .HasForeignKey("EmailLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailLog");
                });

            modelBuilder.Entity("NewsletterWebApp.Data.EmailLog", b =>
                {
                    b.HasOne("NewsletterWebApp.Data.Email", "Email")
                        .WithMany("EmailLogs")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Email");
                });

            modelBuilder.Entity("NewsletterWebApp.Data.EmailLogUser", b =>
                {
                    b.HasOne("NewsletterWebApp.Data.EmailLog", "EmailLog")
                        .WithMany("EmailLogUsers")
                        .HasForeignKey("EmailLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewsletterWebApp.Data.User", "User")
                        .WithMany("EmailLogUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailLog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewsletterWebApp.Data.EmailMailingList", b =>
                {
                    b.HasOne("NewsletterWebApp.Data.Email", "Email")
                        .WithMany("EmailMailingLists")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewsletterWebApp.Data.MailingList", "MailingList")
                        .WithMany("EmailMailingLists")
                        .HasForeignKey("MailingListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Email");

                    b.Navigation("MailingList");
                });

            modelBuilder.Entity("NewsletterWebApp.Data.EmailOpen", b =>
                {
                    b.HasOne("NewsletterWebApp.Data.EmailLog", "EmailLog")
                        .WithMany()
                        .HasForeignKey("EmailLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailLog");
                });

            modelBuilder.Entity("NewsletterWebApp.Data.Subscription", b =>
                {
                    b.HasOne("NewsletterWebApp.Data.MailingList", "MailingList")
                        .WithMany("Subscriptions")
                        .HasForeignKey("MailingListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewsletterWebApp.Data.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MailingList");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewsletterWebApp.Data.Email", b =>
                {
                    b.Navigation("EmailLogs");

                    b.Navigation("EmailMailingLists");
                });

            modelBuilder.Entity("NewsletterWebApp.Data.EmailLog", b =>
                {
                    b.Navigation("Clicks");

                    b.Navigation("EmailLogUsers");
                });

            modelBuilder.Entity("NewsletterWebApp.Data.MailingList", b =>
                {
                    b.Navigation("EmailMailingLists");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("NewsletterWebApp.Data.User", b =>
                {
                    b.Navigation("EmailLogUsers");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
